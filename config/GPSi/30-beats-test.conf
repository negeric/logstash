input {
  beats {
    port => 5044
  }
}
filter {
	if ([message] =~ /^#/) {
		drop{}
	}
  if [type] == "log" {
  	grok {
  		match => [
  			"message", '%{TIMESTAMP_ISO8601:log_timestamp} %{DATA:URI} (?:-|%{DATA:QueryString}) %{INT:Response:int} (?:-|"%{DATA:Referer}") %{INT:Win32Status} %{NUMBER:BytesSent:int} %{NUMBER:BytesReceived:int} (?:-|%{NOTSPACE:Username}) (?:-|"%{DATA:UserAgent}") %{INT:TimeTakenMS:int} %{WORD:Method} (?:-|%{IPORHOST:ClientIP})( "%{WORD:Website}")?( "%{DATA:ServerName}")?'
  		]
  	}
  	# if ClientIP is empty, add the x-forwarded-for value to ClientIP
  	# This means they skipped past Akamai, probably an internal user
  	#if ![ClientIP] {
  	#	mutate {
  	#		add_field => { "ClientIP" => "%{XForwardedFor}" }
  	#	}
  	#}
    #Parse URI if API Hit
    if [Website] == "VISAGEWEBAPI" {
      grok {
        match => [
          "URI", '\/api\/%{WORD:ApiMainMethod}\/.*\/%{INT:SiteID}\/.*\/%{INT:CarId}\/%{NOTSPACE:ApiSubMethod}',
          "URI", '\/api\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}\/%{INT:CarId}',
          "URI", '\/api\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}'

        ]
      }
    }
    #Cast log_timestamp as date
    date {
      match => [ "log_timestamp", "ISO8601" ]
      target => "log_timestamp"
    }
  	#Drop monitoring hits
  	if [URI] == "/testing/host.aspx" or [QueryString] == "monitor" or [QueryString] == "monitor=" or [ClientIP] == "127.0.0.1" {
  		drop{}
  	}
  	#Drop Load balancer checks
  	if [UserAgent] == "HAProxy" {
  		drop{}
  	}
  	#GeoIP
    #Add your local IP networks here
  	if [ClientIP] !~ "(^172\.16\.)" {
  		geoip {
  			#Change me to reflect your GeoIP database location
  			database => "/opt/bitnami/logstash/vendor/geoip/GeoLiteCity.dat"
  			source => "ClientIP"
  			target => "geoip"
				fields => [ "city_name", "country_code2", "region_name", "timezone", "location" ]
  		}
      #mutate {
      #  convert => [ "[geoip][location]", "float"]
      #}
  	} else {
  		mutate {
  			add_field => { "geoip.country_name" => "Internal" }
  		}
  	}
  }
	#remove unused fields
	mutate {
	 remove_field => [ "message" ]
	}
	# Get a total bytes field
	if [BytesSent] or [BytesReceived] {
		ruby {
			code => "event['TotalBytes'] = Integer(event['BytesSent']) + Integer(event['BytesReceived'])"
		}
	}
}
output {
  file { path => "/var/log/logstash/beats-%{+YYYY-MM-dd}.txt" }
}
