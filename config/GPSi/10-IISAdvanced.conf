#########################################################
# IIS Advanced Logs                                     #
# Version: 1.2                                          #
# Logstash Version: 2.4.0                               #
# Author: negeric                                       #
# URL: https://github.com/negeric/logstash/             #
# Date: February, 4 2017                                #
# Dashboard Name: IIS                                   #
#########################################################
# @todo                                                 #
#-------------------------------------------------------#
#-------------------------------------------------------#
# Notes                                                 #
#-------------------------------------------------------#
# Expects the following fields                          #
# date time cs-uri-stem cs-uri-query sc-status cs(Referer) sc-win32-status sc-bytes cs-bytes cs-username cs(User-Agent) TimeTakenMS cs-method c-ip s-sitename s-computername
#########################################################
input {
	#stdin { type => "iis_advanced_full" }
	file {
		type => "iis_advanced_full"
		path => ["/home/sysops/testlogs/VisageApi/*.log"]
    # The following lines are used to re-read config files
    # Remove or comment out when using in production
    #start_position => "beginning"
    #sincedb_path => "/dev/null"
    ignore_older => 0
	}
}

filter {
	if ([message] =~ /^#/) {
		drop{}
	}
  if [type] == "iis_advanced_full" {
  	grok {
  		match => [
  			"message", '%{TIMESTAMP_ISO8601:log_timestamp} %{DATA:URI} (?:-|%{DATA:QueryString}) %{INT:Response:int} (?:-|"%{DATA:Referer}") %{INT:Win32Status} %{NUMBER:BytesSent:int} %{NUMBER:BytesReceived:int} (?:-|%{NOTSPACE:Username}) (?:-|"%{DATA:UserAgent}") %{INT:TimeTakenMS:int} %{WORD:Method} (?:-|%{IPORHOST:ClientIP})( "%{WORD:Website}")?( "%{DATA:ServerName}")?'
  		]
  	}
  	# if ClientIP is empty, add the x-forwarded-for value to ClientIP
  	# This means they skipped past Akamai, probably an internal user
  	#if ![ClientIP] {
  	#	mutate {
  	#		add_field => { "ClientIP" => "%{XForwardedFor}" }
  	#	}
  	#}
    #Parse URI if API Hit
    if [Website] == "VISAGEWEBAPI" {
      grok {
        match => [
          "URI", '\/api\/%{WORD:ApiMainMethod}\/.*\/%{INT:SiteID}\/.*\/%{INT:CarId}\/%{NOTSPACE:ApiSubMethod}',
          "URI", '\/api\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}\/%{INT:CarId}',
          "URI", '\/api\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}'

        ]
      }
    }
    #Cast log_timestamp as date
    date {
      match => [ "log_timestamp", "ISO8601" ]
      target => "log_timestamp"
    }
  	#Drop monitoring hits
  	if [URI] == "/testing/host.aspx" or [QueryString] == "monitor" or [QueryString] == "monitor=" or [ClientIP] == "127.0.0.1" {
  		drop{}
  	}
  	#Drop Load balancer checks
  	if [UserAgent] == "HAProxy" {
  		drop{}
  	}
  	#GeoIP
    #Add your local IP networks here
  	if [ClientIP] !~ "(^172\.16\.)" {
  		geoip {
  			#Change me to reflect your GeoIP database location
  			database => "/opt/bitnami/logstash/vendor/geoip/GeoLiteCity.dat"
  			source => "ClientIP"
  			target => "geoip"
				fields => [ "city_name", "country_code2", "region_name", "timezone", "location" ]
  		}
      #mutate {
      #  convert => [ "[geoip][location]", "float"]
      #}
  	} else {
  		mutate {
  			add_field => { "geoip.country_name" => "Internal" }
  		}
  	}
  }
	#remove unused fields
	mutate {
	 remove_field => [ "message" ]
	}
	# Get a total bytes field
	if [BytesSent] or [BytesReceived] {
		ruby {
			code => "event['TotalBytes'] = Integer(event['BytesSent']) + Integer(event['BytesReceived'])"
		}
	}
}

output {
  #file { path => "/var/log/logstash/test-%{+YYYY-MM-dd}.txt" }
  #stdout { codec => json }
  elasticsearch {
    hosts => [ "localhost:9200" ]
    #index => "IIS-Prod-%{+YYYY.MM.dd}"
    #index => "IIS-Test"
    #document_type => "main"
  }
}
