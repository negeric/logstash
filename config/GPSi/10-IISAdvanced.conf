#########################################################
# IIS Advanced Logs                                     #
# Version: 1.4                                          #
# Logstash Version: 2.4.0                               #
# Author: negeric                                       #
# URL: https://github.com/negeric/logstash/             #
# Date: February, 4 2017                                #
# Dashboard Name: IIS                                   #
#########################################################
# @todo                                                 #
#-------------------------------------------------------#
#-------------------------------------------------------#
# Notes                                                 #
#-------------------------------------------------------#
# Expects the following fields                          #
# date time cs-uri-stem cs-uri-query sc-status cs(Referer) sc-win32-status sc-bytes cs-bytes cs-username cs(User-Agent) TimeTakenMS cs-method c-ip s-sitename s-computername
#########################################################
input {
	beats {
		port => 5044
	}
}

filter {
	if ([message] =~ /^#/) {
		drop{}
	}
	if "IIS-Advanced" in [tags] {
		mutate {
			replace => { "type" => "iis_advanced_full" }
		}
		grok {
			match => [
				"message", '%{TIMESTAMP_ISO8601:ServerTimestamp} %{DATA:URI} (?:-|%{DATA:QueryString}) %{INT:Response:int} (?:-|"%{DATA:Referer}") %{INT:Win32Status} %{NUMBER:BytesSent:int} %{NUMBER:BytesReceived:int} (?:-|%{NOTSPACE:Username}) (?:-|"%{DATA:UserAgent}") %{INT:TimeTakenMS:int} %{WORD:Method} (?:-|%{IPORHOST:ClientIP})( "%{DATA:Website}")?( "%{DATA:ServerName}")?'
			]
		}
		#Parse URI if API Hit
		if [Website] == "VISAGEWEBAPI" {
			grok {
				match => [
					"URI", '\/api\/%{WORD:ApiMainMethod}\/.*\/%{INT:SiteId}\/.*\/%{INT:CarId}\/%{NOTSPACE:ApiSubMethod}',
					"URI", '\/api\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}\/%{INT:CarId}',
					"URI", '\/api\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}'
				]
			}
		}
		if [Website] == "VISAGESPA" {
			grok {
				match => [
					#Leave this at iteId because we use siteId and theSiteId
					"QueryString", 'iteId=%{INT:SiteId}'
				]
			}
			grok {
				match => [
					"URI", '\/api\/VisageSpa\/%{WORD:ApiMainMethod}'
				]
			}
		}
        if [Website] == "VISAGERESTSERVICES" {
            grok {
                match => [
                    "URI", "\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}\/%{INT:SiteId}"
                ]
            }
            # Since all of the URIs look the same, we need to rename SiteId to CarId if
            # the method was Cars instead of Sites
            if [ApiMainMethod] == "Cars" {
                mutate {
                    rename => { "SiteId" => "CarId" }
                }
            }
        }
		if [Website] == "VISAGE SECURE" {
			grok {
				match => [
					"URI", '\/Services\/%{WORD:ApiMainMethod}.svc\/GpsiCarId\/%{INT:CarId}',
					"URI", '\/Services\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}.svc\/Site\/%{INT:SiteId}',
					"URI", '\/Services\/%{WORD:ApiMainMethod}\/Car\/%{WORD:ApiSubMethod}.svc\/Site\/%{INT:SiteId}\/MessageId\/%{INT:MessageId}',
					"URI", '\/Services\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}.svc\/Rtt\/Site\/%{INT:SiteId}',
					"URI", '\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}.svc',
					"URI", '\/Services\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}.svc\/Site\/%{INT:SiteId}',
					"URI", '\/Services\/%{WORD:ApiMainMethod}\/Car\/%{WORD:ApiSubMethod}.svc\/GpsiCarId\/%{INT:CarId}'
				]
			}
		}
		#Remove RackSpace monitoring queries
		if [Website] == "VISAGE NONSECURE" {
			if [UserAgent] == "Rackspace Monitoring/1.1 (https://monitoring.api.rackspacecloud.com)" {
				drop{}
			}
		}
		#Cast log_timestamp as date
		date {
			match => [ "ServerTimestamp", "ISO8601" ]
			target => "@timestamp"
		}
		#GeoIP
		#Add your local IP networks here
		if [ClientIP] !~ "(^192\.168\.)" {
			geoip {
				#Change me to reflect your GeoIP database location
				#database => "/etc/logstash/vendor/geoip/GeoLite2-City.mmdb"
				source => "ClientIP"
				target => "geoip"
				fields => [ "city_name", "country_code2", "region_name", "location" ]
			}
			#mutate {
				#convert => [ "[geoip][location]", "geo_point"]
			#}
		} else {
			mutate {
				add_field => { "geoip.country_name" => "Internal" }
			}
		}
		#remove unused fields
		mutate {
			remove_field => [ "message", "host", "input_type", "log_timestamp", "offset", "source", "tags", "[beat][name]", "[beat][hostname]", "[beat][version]" ]
		}
		# Get a total bytes field
		if [BytesSent] or [BytesReceived] {
			ruby {
				code => "event.set('TotalBytes',Integer(event.get('BytesSent')) + Integer(event.get('BytesReceived')))"
			}
		}
	} else if "IIS-ACT-PROD" in [tags] {
		mutate {
			replace => { "type" => "iis_act_prod" }
		}
		grok {
			match => [
				"message", '%{TIMESTAMP_ISO8601:ServerTimestamp} %{NOTSPACE:ServerName} (?:-|%{IP:ServerIP}) %{WORD:Method} %{DATA:URI} (?:-|%{DATA:QueryString}) %{INT:ServerPort:int} (?:-|%{NOTSPACE:Username}) (?:-|%{IP:LoadBalancerIP}) (?:-|%{DATA:UserAgent}) (?:-|%{NOTSPACE:Referer}) %{NOTSPACE:Website} %{INT:Response:int} %{INT:SubStatus} %{INT:Win32Status} %{NUMBER:BytesSent:int} %{NUMBER:BytesReceived:int} %{INT:TimeTakenMS:int} (?:-|%{IP:ClientIP}) %{WORD:Protocol}'
			]
		}
		#Parse URI if API Hit
		if [Website] == "api.visage.golf" {
			grok {
				match => [
					"URI", '\/api\/%{WORD:ApiMainMethod}\/.*\/%{INT:SiteId}\/.*\/%{INT:CarId}\/%{NOTSPACE:ApiSubMethod}',
					"URI", '\/api\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}\/%{INT:CarId}',
					"URI", '\/api\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}'
				]
			}
		}
		if [Website] == "vcc.visage.golf" {
			grok {
				match => [
					#Leave this at iteId because we use siteId and theSiteId
					"QueryString", 'iteId=%{INT:SiteId}'
				]
			}
			grok {
				match => [
					"URI", '\/api\/VisageSpa\/%{WORD:ApiMainMethod}'
				]
			}
		}
        if [Website] == "restsvc.visage.golf" {
            grok {
                match => [
                    "URI", "\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}\/%{INT:SiteId}"
                ]
            }
            # Since all of the URIs look the same, we need to rename SiteId to CarId if
            # the method was Cars instead of Sites
            if [ApiMainMethod] == "Cars" {
                mutate {
                    rename => { "SiteId" => "CarId" }
                }
            }
        }
		if [Website] == "secure.visage.golf" {
			grok {
				match => [
					"URI", '\/Services\/%{WORD:ApiMainMethod}.svc\/GpsiCarId\/%{INT:CarId}',
					"URI", '\/Services\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}.svc\/Site\/%{INT:SiteId}',
					"URI", '\/Services\/%{WORD:ApiMainMethod}\/Car\/%{WORD:ApiSubMethod}.svc\/Site\/%{INT:SiteId}\/MessageId\/%{INT:MessageId}',
					"URI", '\/Services\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}.svc\/Rtt\/Site\/%{INT:SiteId}',
					"URI", '\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}.svc',
					"URI", '\/Services\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}.svc\/Site\/%{INT:SiteId}',
					"URI", '\/Services\/%{WORD:ApiMainMethod}\/Car\/%{WORD:ApiSubMethod}.svc\/GpsiCarId\/%{INT:CarId}'
				]
			}
		}
		#Remove LBS Queries
		if [Method] == "HEAD" {
			if ![ClientIP] {
				drop{}
			}
		}
		#Remove logs with no Website
		if ![Website] {
			drop{}
		}
		#Remove Azure Traffic Manager Queries and Worldping requests
		if [UserAgent] == "Azure+Traffic+Manager+Endpoint+Monitor" or [UserAgent] == "worldping-api" {
			drop{}
		}
		#Cast log_timestamp as date
		date {
			match => [ "ServerTimestamp", "ISO8601" ]
			target => "@timestamp"
		}
		#GeoIP
		#Add your local IP networks here
		if [ClientIP] !~ "(^10.\.123\.)" {
			geoip {
				#Change me to reflect your GeoIP database location
				#database => "/etc/logstash/vendor/geoip/GeoLite2-City.mmdb"
				source => "ClientIP"
				target => "geoip"
				fields => [ "city_name", "country_code2", "region_name", "location" ]
			}
			#mutate {
				#convert => [ "[geoip][location]", "geo_point"]
			#}
		} else {
			mutate {
				add_field => { "geoip.country_name" => "Internal" }
			}
		}
		#remove unused fields
		mutate {
			remove_field => [ "message", "host", "input_type", "log_timestamp", "offset", "source", "tags", "[beat][name]", "[beat][hostname]", "[beat][version]", "ServerIP", "ServerPort" ]
		}
		# Get a total bytes field
		if [BytesSent] or [BytesReceived] {
			ruby {
				code => "event.set('TotalBytes',Integer(event.get('BytesSent')) + Integer(event.get('BytesReceived')))"
			}
		}
	}  else if "IIS-ACT-DEV" in [tags] {
		mutate {
			replace => { "type" => "iis_act_dev" }
		}
		grok {
			match => [
				"message", '%{TIMESTAMP_ISO8601:ServerTimestamp} %{NOTSPACE:ServerName} (?:-|%{IP:ServerIP}) %{WORD:Method} %{DATA:URI} (?:-|%{DATA:QueryString}) %{INT:ServerPort:int} (?:-|%{NOTSPACE:Username}) (?:-|%{IP:LoadBalancerIP}) %{NOTSPACE:ProtocolVersion} (?:-|%{DATA:UserAgent}) (?:-|%{NOTSPACE:Referer}) %{NOTSPACE:Website} %{INT:Response:int} %{INT:SubStatus} %{INT:Win32Status} %{NUMBER:BytesSent:int} %{NUMBER:BytesReceived:int} %{INT:TimeTakenMS:int} (?:-|%{IP:ClientIP})'
			]
		}
		#Parse URI if API Hit
		if [Website] == "api.visage.golf" {
			grok {
				match => [
					"URI", '\/api\/%{WORD:ApiMainMethod}\/.*\/%{INT:SiteId}\/.*\/%{INT:CarId}\/%{NOTSPACE:ApiSubMethod}',
					"URI", '\/api\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}\/%{INT:CarId}',
					"URI", '\/api\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}'
				]
			}
		}
		if [Website] == "vcc.visage.golf" {
			grok {
				match => [
					#Leave this at iteId because we use siteId and theSiteId
					"QueryString", 'iteId=%{INT:SiteId}'
				]
			}
			grok {
				match => [
					"URI", '\/api\/VisageSpa\/%{WORD:ApiMainMethod}'
				]
			}
		}
        if [Website] == "restsvc.visage.golf" {
            grok {
                match => [
                    "URI", "\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}\/%{INT:SiteId}"
                ]
            }
            # Since all of the URIs look the same, we need to rename SiteId to CarId if
            # the method was Cars instead of Sites
            if [ApiMainMethod] == "Cars" {
                mutate {
                    rename => { "SiteId" => "CarId" }
                }
            }
        }
		if [Website] == "secure.visage.golf" {
			grok {
				match => [
					"URI", '\/Services\/%{WORD:ApiMainMethod}.svc\/GpsiCarId\/%{INT:CarId}',
					"URI", '\/Services\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}.svc\/Site\/%{INT:SiteId}',
					"URI", '\/Services\/%{WORD:ApiMainMethod}\/Car\/%{WORD:ApiSubMethod}.svc\/Site\/%{INT:SiteId}\/MessageId\/%{INT:MessageId}',
					"URI", '\/Services\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}.svc\/Rtt\/Site\/%{INT:SiteId}',
					"URI", '\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}.svc',
					"URI", '\/Services\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}.svc\/Site\/%{INT:SiteId}',
					"URI", '\/Services\/%{WORD:ApiMainMethod}\/Car\/%{WORD:ApiSubMethod}.svc\/GpsiCarId\/%{INT:CarId}'
				]
			}
		}
		#Remove LBS Queries
		if [Method] == "HEAD" {
			if ![ClientIP] {
				drop{}
			}
		}
		#Remove logs with no Website
		if ![Website] {
			drop{}
		}
		#Remove Azure Traffic Manager Queries and Worldping requests
		if [UserAgent] == "Azure+Traffic+Manager+Endpoint+Monitor" or [UserAgent] == "worldping-api" {
			drop{}
		}
		#Cast log_timestamp as date
		date {
			match => [ "ServerTimestamp", "ISO8601" ]
			target => "@timestamp"
		}
		#GeoIP
		#Add your local IP networks here
		if [ClientIP] !~ "(^10.\.123\.)" {
			geoip {
				#Change me to reflect your GeoIP database location
				#database => "/etc/logstash/vendor/geoip/GeoLite2-City.mmdb"
				source => "ClientIP"
				target => "geoip"
				fields => [ "city_name", "country_code2", "region_name", "location" ]
			}
			#mutate {
				#convert => [ "[geoip][location]", "geo_point"]
			#}
		} else {
			mutate {
				add_field => { "geoip.country_name" => "Internal" }
			}
		}
		#remove unused fields
		mutate {
			remove_field => [ "message", "host", "input_type", "log_timestamp", "offset", "source", "tags", "[beat][name]", "[beat][hostname]", "[beat][version]", "ServerIP", "ServerPort" ]
		}
		# Get a total bytes field
		if [BytesSent] or [BytesReceived] {
			ruby {
				code => "event.set('TotalBytes',Integer(event.get('BytesSent')) + Integer(event.get('BytesReceived')))"
			}
		}
	}
}
