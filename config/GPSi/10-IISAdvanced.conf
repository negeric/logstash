#########################################################
# IIS Advanced Logs                                     #
# Version: 1.2                                          #
# Logstash Version: 2.4.0                               #
# Author: negeric                                       #
# URL: https://github.com/negeric/logstash/             #
# Date: February, 4 2017                                #
# Dashboard Name: IIS                                   #
#########################################################
# @todo                                                 #
#-------------------------------------------------------#
#-------------------------------------------------------#
# Notes                                                 #
#-------------------------------------------------------#
# Expects the following fields                          #
# date time cs-uri-stem cs-uri-query sc-status cs(Referer) sc-win32-status sc-bytes cs-bytes cs-username cs(User-Agent) TimeTakenMS cs-method c-ip s-sitename s-computername
#########################################################
input {
	#stdin { type => "iis_advanced_full" }
  beats {
    port => 5044
  }
}

filter {
	if ([message] =~ /^#/) {
		drop{}
	}
  if "IIS-Advanced" in [tags] {
		mutate {
	  	replace => { "type" => "iis_advanced_full" }
		}
  	grok {
  		match => [
  			"message", '%{TIMESTAMP_ISO8601:log_timestamp} %{DATA:URI} (?:-|%{DATA:QueryString}) %{INT:Response:int} (?:-|"%{DATA:Referer}") %{INT:Win32Status} %{INT:BytesSent:int} %{INT:BytesReceived:int} (?:-|%{NOTSPACE:Username}) (?:-|"%{DATA:UserAgent}") %{INT:TimeTakenMS:int} %{WORD:Method} (?:-|%{IPORHOST:ClientIP})( "%{WORD:Website}")?( "%{DATA:ServerName}")?'
  		]
  	}
    #Parse URI if API Hit
    if [Website] == "VISAGEWEBAPI" {
      grok {
        match => [
          "URI", '\/api\/%{WORD:ApiMainMethod}\/.*\/%{INT:SiteID}\/.*\/%{INT:CarId}\/%{NOTSPACE:ApiSubMethod}',
          "URI", '\/api\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}\/%{INT:CarId}',
          "URI", '\/api\/%{WORD:ApiMainMethod}\/%{WORD:ApiSubMethod}'

        ]
      }
    }
		if [Website] == "VISAGESPA" {
			grok {
				match => [
					#Leave this at iteId because we use siteId and theSiteId
					"QueryString", 'iteId=%{INT:SiteId}',
					"URI", '\/api\/VisageSpa\/%{WORD:ApiMainMethod}'
				]
			}
		}
    #Cast log_timestamp as date
    date {
      match => [ "log_timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  	#Drop monitoring hits
  	if [URI] == "/testing/host.aspx" or [QueryString] == "monitor" or [QueryString] == "monitor=" or [ClientIP] == "127.0.0.1" {
  		drop{}
  	}
  	#Drop Load balancer checks
  	if [UserAgent] == "HAProxy" {
  		drop{}
  	}
  	#GeoIP
    #Add your local IP networks here
  	if [ClientIP] !~ "(^192\.168\.)" {
  		geoip {
  			#Change me to reflect your GeoIP database location
  			#database => "/etc/logstash/vendor/geoip/GeoLite2-City.mmdb"
  			source => "ClientIP"
  			target => "geoip"
				fields => [ "city_name", "country_code2", "region_name", "timezone", "location" ]
  		}
      #mutate {
      #  convert => [ "[geoip][location]", "float"]
      #}
  	} else {
  		mutate {
  			add_field => { "geoip.country_name" => "Internal" }
  		}
  	}
		#remove unused fields
		mutate {
		 remove_field => [ "message", "host", "input_type", "log_timestamp", "offset", "source", "tags" ]
		}
		# Get a total bytes field
		if [BytesSent] or [BytesReceived] {
			ruby {
				code => "event.set('TotalBytes',Integer(event.get('BytesSent')) + Integer(event.get('BytesReceived'))"
			}
		}
  }
}

output {
  #file { path => "/var/log/logstash/test-%{+YYYY-MM-dd}.txt" }
  #stdout { codec => json }
  elasticsearch {
    hosts => [ "10.123.6.6:9200" ]
    #index => "IIS-Prod-%{+YYYY.MM.dd}"
    #index => "IIS-Test"
    #document_type => "main"
  }
}
