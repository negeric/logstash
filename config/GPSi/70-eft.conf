#########################################################
# EFT W3C Input                                         #
# Version: 1.0                                          #
# Logstash Version: 5+                                  #
# Author: negeric                                       #
# URL: https://github.com/negeric/logstash/             #
# Date: March, 19 2018                                  #
#########################################################
# @todo                                                 #
#-------------------------------------------------------#
#-------------------------------------------------------#
# Notes                                                 #
#-------------------------------------------------------#
#########################################################
input {
	beats {
		port => 5049
	}
}
filter {
	if ([message] =~ /^#/) {
		drop{}
	}
	if "EFT" in [tags] {
		mutate {
			replace => { "type" => "eft" }
		}
    #If ACT in Tags, then set product
    if "ACT" in [tags] {
      mutate {
        add_field => { "Product" => "ACT" }
      }
    }
    if "Visage" in [tags] {
      mutate {
        add_field => { "Product" => "Visage" }
      }
    }
		grok {
			match => [
				"message", '%{TIMESTAMP_ISO8601:Date} %{IP:ClientIP} - %{NOTSPACE:Username} \[%{INT:ConnectionId}\]%{WORD:Method} %{NOTSPACE:Uri} - %{NOTSPACE:Status} %{NOTSPACE:ScBytes} %{NOTSPACE:CsBytes} %{GREEDYDATA:Remainder}'
			]
		}
		#Fix byte columns, could be an int or could be -
		if [ScBytes] == "-" {
			mutate {
        replace => { "ScBytes" => 0 }
      }
		}
    if [CsBytes] == "-" {
      mutate {
        replace => { "CsBytes" => 0 }
      }
    }
    #Set environment based on username
    #Check if env field is at the end of the username
    if [Username] =~ "-beta$" {
      mutate {
        add_field => { "Env" => "Beta"}
      }
    }
    if [Username] =~ "-dev$" {
      mutate {
        add_field => { "Env" => "Dev"}
      }
    }
    if [Username] =~ "-prod$" {
      mutate {
        add_field => { "Env" => "Prod"}
      }
    }
    #If the environment is provided with the username (Internal users)
    #Then try to pull the environment from the Uri path
    if ![Env] and [Uri] {
      if [Uri] =~ "^\/beta\/" {
        mutate {
          add_field => { "Env" => "Beta" }
        }
      }
      if [Uri] =~ "^\/dev\/" {
        mutate {
          add_field => { "Env" => "Dev" }
        }
      }
      if [Uri] =~ "^\/prod\/" {
        mutate {
          add_field => { "Env" => "Prod" }
        }
      }
    }
    #Change byte column to integers
    mutate {
      convert => {
        "ScBytes" => "integer"
        "CsBytes" => "integer"
      }
    }
		#Cast log_timestamp as date
		date {
			match => [ "Date", "ISO8601" ]
			target => "@timestamp"
		}
		#GeoIP
		#Add your local IP networks here
		if [ClientIP] !~ "(^172\.16\.)" {
			geoip {
				#Change me to reflect your GeoIP database location
				#database => "/etc/logstash/vendor/geoip/GeoLite2-City.mmdb"
				source => "ClientIP"
				target => "geoip"
				fields => [ "city_name", "country_code2", "region_name", "location" ]
			}
		} else {
			mutate {
				add_field => { "geoip.country_name" => "Internal" }
			}
		}
		#remove unused fields
		mutate {
			remove_field => [ "message", "host", "input_type", "date", "offset", "source", "tags", "[beat][name]", "[beat][hostname]", "[beat][version]" ]
		}
		# Get a total bytes field
		if [ScBytes] or [CsBytes] {
			ruby {
				code => "event.set('TotalBytes',Integer(event.get('BytesSent')) + Integer(event.get('BytesReceived')))"
			}
		}
	}
}
