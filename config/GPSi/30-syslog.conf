#########################################################
# Syslog Input                                          #
# Version: 1.0                                          #
# Logstash Version: 5+                                  #
# Author: negeric                                       #
# URL: https://github.com/negeric/logstash/             #
# Date: March, 16 2017                                  #
#########################################################
# @todo                                                 #
#-------------------------------------------------------#
#-------------------------------------------------------#
# Notes                                                 #
#-------------------------------------------------------#
#########################################################
input {
  syslog {
    port => 5140
    type => "syslog"
  }
}
filter {
  if [host] =~ /172\.16\.3\.253/ {
    mutate {
      add_tag => ["pfsense", "srq"]
  		replace => { "type" => "firewall" }
    }
  }
  if "pfsense" in [tags] {
    grok {
      add_tag => [ "firewall" ]
      match => [ "message", "<(?<evtid>.*)>(?<datetime>(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\s+(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) (?:2[0123]|[01]?[0-9]):(?:[0-5][0-9]):(?:[0-5][0-9])) (?<prog>.*?): (?<msg>.*)" ]
    }
    mutate {
      gsub => ["datetime","  "," "]
    }
    date {
      match => [ "datetime", "MMM dd HH:mm:ss +0400" ]
      timezone => "UTC"
    }
    mutate {
      replace => [ "message", "%{msg}" ]
    }
    mutate {
      remove_field => [ "msg", "datetime" ]
    }
    if [prog] =~ /^filterlog$/ {
        mutate {
          remove_field => [ "msg", "datetime" ]
        }
        grok {
          patterns_dir => "/etc/logstash/git-repo/config/GPSi/patterns"
          match => [ "message", "%{PFSENSE_LOG_DATA}%{PFSENSE_IP_SPECIFIC_DATA}%{PFSENSE_IP_DATA}%{PFSENSE_PROTOCOL_DATA}",
             "message", "%{PFSENSE_LOG_DATA}%{PFSENSE_IPv4_SPECIFIC_DATA_ECN}%{PFSENSE_IP_DATA}%{PFSENSE_PROTOCOL_DATA}" ]
        }
        mutate {
          lowercase => [ 'proto' ]
        }
        geoip {
          add_tag => [ "GeoIP" ]
          source => "src_ip"
          # Optional GeoIP database
          database => "/etc/logstash/vendor/geoip/GeoLite2-City.mmdb"
        }
      }
    }
    if [prog] =~ /^charon$/ {
      grok {
        patterns_dir => "/etc/logstash/git-repo/config/GPSi/patterns"
        match => [ "message", "%{PFSENSE_CHARON_NET}",
          "message", "%{PFSENSE_CHARON}"]
      }
      mutate {
        remove_field => [ "con_subId", "u_num" ]
      }
    }
    if "_grokparsefailure" in [tags] {
      mutate {
        replace => { "type" => "syslog_error" }
      }
    }
}
