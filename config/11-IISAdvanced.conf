######################################################### 
# IIS Advanced Logs                                     #
# Version: 1.1                                          #
# Logstash Version: 1.4.2                               #
# Author: negeric                                       #
# URL: https://github.com/negeric/logstash/             #
# Date: October 22, 2014                                #
# Dashboard Name: IIS                                   #
#########################################################     
# @todo                                                 #
#-------------------------------------------------------#
#-------------------------------------------------------#            
# Notes                                                 #
#-------------------------------------------------------#  
# Expects the following fields                          #
# Date-Local Time-Local True-Client-IP X-Forwarded-For s-proxy c-ip s-sitename cs-uri-stem cs-uri-query cs-username TimeTakenMS sc-status sc-substatus sc-win32-status cs(Referer) cs-method cs(User-Agent) sc-bytes cs-bytes        
#########################################################
input {
	#stdin { type => "iis_advanced_full" }
	file {
		type => "iis_advanced_full"
		path => ["/mnt/logs/IIS/AdvancedLogs/**/*.log"]	
	}
}

filter {
	if ([message] =~ /^#/) {
		drop{}
	}
	grok {
		type => "iis_advanced_full"
		#pattern => '%{IISDATE:date} %{TIME:time} (?:-|"%{IP:ClientIP}") "%{DATA:XForwardedFor}" (?:-|"%{DATA:Proxy}") %{IP:DirectIP} "%{DATA:Site}" %{DATA:URI} (?:-|%{DATA:QueryString}) (?:-|%{DATA:Username}) %{INT:TimeTakenMS:int} %{INT:Status:int} %{INT:SubStatus} %{INT:Win32Status} (?:-|"%{DATA:Referer}") %{WORD:Method} (?:-|"%{DATA:UserAgent}")'
		match => [
			"message", '%{IISDATE:date} %{TIME:time} (?:-|"%{IP:ClientIP}") "%{DATA:XForwardedFor}" (?:-|"%{DATA:Proxy}") %{IP:DirectIP} "%{DATA:Site}" %{DATA:URI} (?:-|%{DATA:QueryString}) (?:-|%{DATA:Username}) %{INT:TimeTakenMS:int} %{INT:Response:int} %{INT:SubStatus} %{INT:Win32Status} (?:-|"%{DATA:Referer}") %{WORD:Method} (?:-|"%{DATA:UserAgent}")',
			"message", '%{IISDATE:date} %{TIME:time} (?:-|"%{IP:ClientIP}") "%{DATA:XForwardedFor}" (?:-|"%{DATA:Proxy}") %{IP:DirectIP} "%{DATA:Site}" %{DATA:URI} (?:-|%{DATA:QueryString}) (?:-|%{DATA:Username}) %{INT:TimeTakenMS:int} %{INT:Response:int} %{INT:SubStatus} %{INT:Win32Status} (?:-|"%{DATA:Referer}") %{WORD:Method} (?:-|"%{DATA:UserAgent}") %{NUMBER:BytesSent} %{NUMBER:BytesReceived}'
		]
	}
	#Create timestamp based on date/time fields
	mutate {
		add_field => { "dt" => "%{date} %{time}" }
	}
	#Add timestamp based on log entry date
	date {
		match => [ "dt", 'yyyy-MM-dd HH:mm:ss.SSS' ]
		#Update to your timezone
		timezone => [ "America/New_York" ]
		target => "@timestamp"
	}
	# if ClientIP is empty, add the x-forwarded-for value to ClientIP
	# This means they skipped past Akamai, probably an internal user
	if ![ClientIP] {
		mutate {
			add_field => { "ClientIP" => "%{XForwardedFor}" }
		}
	}
	mutate {
		remove_field => [dt]
	}
	#Drop monitoring hits
	if [URI] == "/testing/host.aspx" or [QueryString] == "monitor" or [QueryString] == "monitor=" or [ClientIP] == "127.0.0.1" {
		drop{}
	}
	#Drop Load balancer checks
	if [UserAgent] == "HAProxy" or [XForwardedFor] == "none" {
		drop{}
	}
	#GeoIP
	if [ClientIP] !~ "(^192\.168\.)" {
		geoip {
			#Change me to reflect your GeoIP database location
			database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
			source => "ClientIP"
			target => "GeoIP"
		}
	} else {
		mutate {
			add_field => { "GeoIP.country_name" => "Internal" }
		}
	}
	#remove unused fields
	mutate {
		remove_field => [ "_type", "message", "GeoIP.ip", "GeoIP.latitude", "GeoIP.longitude", "host" ]
	}
	# Get a total bytes field
	if [BytesSent] or [BytesReceived] {
		ruby {
			code => "event['TotalBytes'] = Integer(event['BytesSent']) + Integer(event['BytesReceived'])"
		}
	}
}

output {
	if [type] == "iis_advanced_full" {
		elasticsearch { host => localhost }
		#stdout { codec => json }
	}
}
